version: "3.4"

services:
  server:
    profiles: ["all"]
    network_mode: host
    build: server
    env_file: server/.env
    entrypoint: ["sh", "-c", 'sleep 3; main;']
    depends_on:
      oauth_emulator:
        condition: service_healthy
      postgres:
        condition: service_healthy

  oauth_emulator:
    profiles: ["all", "components"]
    network_mode: host
    build: oauth-emulator
    env_file: oauth-emulator/.env
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4130/health"]
      interval: 2s
      timeout: 5s
      retries: 5

  client:
    profiles: ["all", "components"]
    network_mode: host
    build:
      context: client
      dockerfile: dev.Dockerfile
    volumes:
      - ./client/src:/app/src
  postgres:
    network_mode: host
    profiles: ["all", "components"]
    image: postgres:15.4
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: test
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./db/test_data.sql:/docker-entrypoint-initdb.d/test_data.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 5s
      retries: 5
  pgadmin:
    image: dpage/pgadmin4
    profiles: ["all", "components"]
    container_name: pgadmin
    network_mode: host
    volumes:
      - ./db/pgadmin.json:/pgadmin4/servers.json
    environment:
      PGADMIN_LISTEN_PORT: 4140
      PGADMIN_DEFAULT_EMAIL: pgadmin@pgadmin.com
      PGADMIN_DEFAULT_PASSWORD: pgadmin
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"